// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"unnecessary/db/model"
)

func newApplication(db *gorm.DB, opts ...gen.DOOption) application {
	_application := application{}

	_application.applicationDo.UseDB(db, opts...)
	_application.applicationDo.UseModel(&model.Application{})

	tableName := _application.applicationDo.TableName()
	_application.ALL = field.NewAsterisk(tableName)
	_application.ID = field.NewInt64(tableName, "id")
	_application.DictPlatformID = field.NewInt16(tableName, "dict_platform_id")
	_application.Name = field.NewString(tableName, "name")
	_application.DisplayName = field.NewString(tableName, "display_name")
	_application.CreatedTs = field.NewTime(tableName, "created_ts")
	_application.ModifiedTs = field.NewTime(tableName, "modified_ts")
	_application.DeletedTs = field.NewTime(tableName, "deleted_ts")
	_application.SomeFlg = field.NewBool(tableName, "some_flg")
	_application.SomeDouble1 = field.NewFloat64(tableName, "some_double1")
	_application.SomeDouble2 = field.NewFloat64(tableName, "some_double2")
	_application.SomeJSON = field.NewString(tableName, "some_json")
	_application.DictPlatform = applicationBelongsToDictPlatform{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("DictPlatform", "model.DictPlatform"),
	}

	_application.Tags = applicationManyToManyTags{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Tags", "model.Tag"),
	}

	_application.fillFieldMap()

	return _application
}

type application struct {
	applicationDo applicationDo

	ALL            field.Asterisk
	ID             field.Int64 // Application ID
	DictPlatformID field.Int16
	Name           field.String
	DisplayName    field.String
	CreatedTs      field.Time
	ModifiedTs     field.Time
	DeletedTs      field.Time
	SomeFlg        field.Bool
	SomeDouble1    field.Float64
	SomeDouble2    field.Float64
	SomeJSON       field.String
	DictPlatform   applicationBelongsToDictPlatform

	Tags applicationManyToManyTags

	fieldMap map[string]field.Expr
}

func (a application) Table(newTableName string) *application {
	a.applicationDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a application) As(alias string) *application {
	a.applicationDo.DO = *(a.applicationDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *application) updateTableName(table string) *application {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.DictPlatformID = field.NewInt16(table, "dict_platform_id")
	a.Name = field.NewString(table, "name")
	a.DisplayName = field.NewString(table, "display_name")
	a.CreatedTs = field.NewTime(table, "created_ts")
	a.ModifiedTs = field.NewTime(table, "modified_ts")
	a.DeletedTs = field.NewTime(table, "deleted_ts")
	a.SomeFlg = field.NewBool(table, "some_flg")
	a.SomeDouble1 = field.NewFloat64(table, "some_double1")
	a.SomeDouble2 = field.NewFloat64(table, "some_double2")
	a.SomeJSON = field.NewString(table, "some_json")

	a.fillFieldMap()

	return a
}

func (a *application) WithContext(ctx context.Context) IApplicationDo {
	return a.applicationDo.WithContext(ctx)
}

func (a application) TableName() string { return a.applicationDo.TableName() }

func (a application) Alias() string { return a.applicationDo.Alias() }

func (a *application) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *application) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 13)
	a.fieldMap["id"] = a.ID
	a.fieldMap["dict_platform_id"] = a.DictPlatformID
	a.fieldMap["name"] = a.Name
	a.fieldMap["display_name"] = a.DisplayName
	a.fieldMap["created_ts"] = a.CreatedTs
	a.fieldMap["modified_ts"] = a.ModifiedTs
	a.fieldMap["deleted_ts"] = a.DeletedTs
	a.fieldMap["some_flg"] = a.SomeFlg
	a.fieldMap["some_double1"] = a.SomeDouble1
	a.fieldMap["some_double2"] = a.SomeDouble2
	a.fieldMap["some_json"] = a.SomeJSON

}

func (a application) clone(db *gorm.DB) application {
	a.applicationDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a application) replaceDB(db *gorm.DB) application {
	a.applicationDo.ReplaceDB(db)
	return a
}

type applicationBelongsToDictPlatform struct {
	db *gorm.DB

	field.RelationField
}

func (a applicationBelongsToDictPlatform) Where(conds ...field.Expr) *applicationBelongsToDictPlatform {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a applicationBelongsToDictPlatform) WithContext(ctx context.Context) *applicationBelongsToDictPlatform {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a applicationBelongsToDictPlatform) Session(session *gorm.Session) *applicationBelongsToDictPlatform {
	a.db = a.db.Session(session)
	return &a
}

func (a applicationBelongsToDictPlatform) Model(m *model.Application) *applicationBelongsToDictPlatformTx {
	return &applicationBelongsToDictPlatformTx{a.db.Model(m).Association(a.Name())}
}

type applicationBelongsToDictPlatformTx struct{ tx *gorm.Association }

func (a applicationBelongsToDictPlatformTx) Find() (result *model.DictPlatform, err error) {
	return result, a.tx.Find(&result)
}

func (a applicationBelongsToDictPlatformTx) Append(values ...*model.DictPlatform) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a applicationBelongsToDictPlatformTx) Replace(values ...*model.DictPlatform) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a applicationBelongsToDictPlatformTx) Delete(values ...*model.DictPlatform) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a applicationBelongsToDictPlatformTx) Clear() error {
	return a.tx.Clear()
}

func (a applicationBelongsToDictPlatformTx) Count() int64 {
	return a.tx.Count()
}

type applicationManyToManyTags struct {
	db *gorm.DB

	field.RelationField
}

func (a applicationManyToManyTags) Where(conds ...field.Expr) *applicationManyToManyTags {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a applicationManyToManyTags) WithContext(ctx context.Context) *applicationManyToManyTags {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a applicationManyToManyTags) Session(session *gorm.Session) *applicationManyToManyTags {
	a.db = a.db.Session(session)
	return &a
}

func (a applicationManyToManyTags) Model(m *model.Application) *applicationManyToManyTagsTx {
	return &applicationManyToManyTagsTx{a.db.Model(m).Association(a.Name())}
}

type applicationManyToManyTagsTx struct{ tx *gorm.Association }

func (a applicationManyToManyTagsTx) Find() (result []*model.Tag, err error) {
	return result, a.tx.Find(&result)
}

func (a applicationManyToManyTagsTx) Append(values ...*model.Tag) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a applicationManyToManyTagsTx) Replace(values ...*model.Tag) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a applicationManyToManyTagsTx) Delete(values ...*model.Tag) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a applicationManyToManyTagsTx) Clear() error {
	return a.tx.Clear()
}

func (a applicationManyToManyTagsTx) Count() int64 {
	return a.tx.Count()
}

type applicationDo struct{ gen.DO }

type IApplicationDo interface {
	gen.SubQuery
	Debug() IApplicationDo
	WithContext(ctx context.Context) IApplicationDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IApplicationDo
	WriteDB() IApplicationDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IApplicationDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IApplicationDo
	Not(conds ...gen.Condition) IApplicationDo
	Or(conds ...gen.Condition) IApplicationDo
	Select(conds ...field.Expr) IApplicationDo
	Where(conds ...gen.Condition) IApplicationDo
	Order(conds ...field.Expr) IApplicationDo
	Distinct(cols ...field.Expr) IApplicationDo
	Omit(cols ...field.Expr) IApplicationDo
	Join(table schema.Tabler, on ...field.Expr) IApplicationDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IApplicationDo
	RightJoin(table schema.Tabler, on ...field.Expr) IApplicationDo
	Group(cols ...field.Expr) IApplicationDo
	Having(conds ...gen.Condition) IApplicationDo
	Limit(limit int) IApplicationDo
	Offset(offset int) IApplicationDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IApplicationDo
	Unscoped() IApplicationDo
	Create(values ...*model.Application) error
	CreateInBatches(values []*model.Application, batchSize int) error
	Save(values ...*model.Application) error
	First() (*model.Application, error)
	Take() (*model.Application, error)
	Last() (*model.Application, error)
	Find() ([]*model.Application, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Application, err error)
	FindInBatches(result *[]*model.Application, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Application) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IApplicationDo
	Assign(attrs ...field.AssignExpr) IApplicationDo
	Joins(fields ...field.RelationField) IApplicationDo
	Preload(fields ...field.RelationField) IApplicationDo
	FirstOrInit() (*model.Application, error)
	FirstOrCreate() (*model.Application, error)
	FindByPage(offset int, limit int) (result []*model.Application, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IApplicationDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a applicationDo) Debug() IApplicationDo {
	return a.withDO(a.DO.Debug())
}

func (a applicationDo) WithContext(ctx context.Context) IApplicationDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a applicationDo) ReadDB() IApplicationDo {
	return a.Clauses(dbresolver.Read)
}

func (a applicationDo) WriteDB() IApplicationDo {
	return a.Clauses(dbresolver.Write)
}

func (a applicationDo) Session(config *gorm.Session) IApplicationDo {
	return a.withDO(a.DO.Session(config))
}

func (a applicationDo) Clauses(conds ...clause.Expression) IApplicationDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a applicationDo) Returning(value interface{}, columns ...string) IApplicationDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a applicationDo) Not(conds ...gen.Condition) IApplicationDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a applicationDo) Or(conds ...gen.Condition) IApplicationDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a applicationDo) Select(conds ...field.Expr) IApplicationDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a applicationDo) Where(conds ...gen.Condition) IApplicationDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a applicationDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IApplicationDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a applicationDo) Order(conds ...field.Expr) IApplicationDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a applicationDo) Distinct(cols ...field.Expr) IApplicationDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a applicationDo) Omit(cols ...field.Expr) IApplicationDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a applicationDo) Join(table schema.Tabler, on ...field.Expr) IApplicationDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a applicationDo) LeftJoin(table schema.Tabler, on ...field.Expr) IApplicationDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a applicationDo) RightJoin(table schema.Tabler, on ...field.Expr) IApplicationDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a applicationDo) Group(cols ...field.Expr) IApplicationDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a applicationDo) Having(conds ...gen.Condition) IApplicationDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a applicationDo) Limit(limit int) IApplicationDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a applicationDo) Offset(offset int) IApplicationDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a applicationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IApplicationDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a applicationDo) Unscoped() IApplicationDo {
	return a.withDO(a.DO.Unscoped())
}

func (a applicationDo) Create(values ...*model.Application) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a applicationDo) CreateInBatches(values []*model.Application, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a applicationDo) Save(values ...*model.Application) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a applicationDo) First() (*model.Application, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Application), nil
	}
}

func (a applicationDo) Take() (*model.Application, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Application), nil
	}
}

func (a applicationDo) Last() (*model.Application, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Application), nil
	}
}

func (a applicationDo) Find() ([]*model.Application, error) {
	result, err := a.DO.Find()
	return result.([]*model.Application), err
}

func (a applicationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Application, err error) {
	buf := make([]*model.Application, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a applicationDo) FindInBatches(result *[]*model.Application, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a applicationDo) Attrs(attrs ...field.AssignExpr) IApplicationDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a applicationDo) Assign(attrs ...field.AssignExpr) IApplicationDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a applicationDo) Joins(fields ...field.RelationField) IApplicationDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a applicationDo) Preload(fields ...field.RelationField) IApplicationDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a applicationDo) FirstOrInit() (*model.Application, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Application), nil
	}
}

func (a applicationDo) FirstOrCreate() (*model.Application, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Application), nil
	}
}

func (a applicationDo) FindByPage(offset int, limit int) (result []*model.Application, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a applicationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a applicationDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a applicationDo) Delete(models ...*model.Application) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *applicationDo) withDO(do gen.Dao) *applicationDo {
	a.DO = *do.(*gen.DO)
	return a
}
