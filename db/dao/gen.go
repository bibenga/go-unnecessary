// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q              = new(Query)
	Application    *application
	ApplicationTag *applicationTag
	Audit          *audit
	DictPlatform   *dictPlatform
	Tag            *tag
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	Application = &Q.Application
	ApplicationTag = &Q.ApplicationTag
	Audit = &Q.Audit
	DictPlatform = &Q.DictPlatform
	Tag = &Q.Tag
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:             db,
		Application:    newApplication(db, opts...),
		ApplicationTag: newApplicationTag(db, opts...),
		Audit:          newAudit(db, opts...),
		DictPlatform:   newDictPlatform(db, opts...),
		Tag:            newTag(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Application    application
	ApplicationTag applicationTag
	Audit          audit
	DictPlatform   dictPlatform
	Tag            tag
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:             db,
		Application:    q.Application.clone(db),
		ApplicationTag: q.ApplicationTag.clone(db),
		Audit:          q.Audit.clone(db),
		DictPlatform:   q.DictPlatform.clone(db),
		Tag:            q.Tag.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:             db,
		Application:    q.Application.replaceDB(db),
		ApplicationTag: q.ApplicationTag.replaceDB(db),
		Audit:          q.Audit.replaceDB(db),
		DictPlatform:   q.DictPlatform.replaceDB(db),
		Tag:            q.Tag.replaceDB(db),
	}
}

type queryCtx struct {
	Application    IApplicationDo
	ApplicationTag IApplicationTagDo
	Audit          IAuditDo
	DictPlatform   IDictPlatformDo
	Tag            ITagDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Application:    q.Application.WithContext(ctx),
		ApplicationTag: q.ApplicationTag.WithContext(ctx),
		Audit:          q.Audit.WithContext(ctx),
		DictPlatform:   q.DictPlatform.WithContext(ctx),
		Tag:            q.Tag.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
