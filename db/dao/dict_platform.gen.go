// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"unnecessary/db/model"
)

func newDictPlatform(db *gorm.DB, opts ...gen.DOOption) dictPlatform {
	_dictPlatform := dictPlatform{}

	_dictPlatform.dictPlatformDo.UseDB(db, opts...)
	_dictPlatform.dictPlatformDo.UseModel(&model.DictPlatform{})

	tableName := _dictPlatform.dictPlatformDo.TableName()
	_dictPlatform.ALL = field.NewAsterisk(tableName)
	_dictPlatform.ID = field.NewInt16(tableName, "id")
	_dictPlatform.Name = field.NewString(tableName, "name")
	_dictPlatform.DisplayName = field.NewString(tableName, "display_name")
	_dictPlatform.CreatedTs = field.NewTime(tableName, "created_ts")
	_dictPlatform.ModifiedTs = field.NewTime(tableName, "modified_ts")
	_dictPlatform.DeletedTs = field.NewTime(tableName, "deleted_ts")

	_dictPlatform.fillFieldMap()

	return _dictPlatform
}

type dictPlatform struct {
	dictPlatformDo dictPlatformDo

	ALL         field.Asterisk
	ID          field.Int16
	Name        field.String
	DisplayName field.String
	CreatedTs   field.Time
	ModifiedTs  field.Time
	DeletedTs   field.Time

	fieldMap map[string]field.Expr
}

func (d dictPlatform) Table(newTableName string) *dictPlatform {
	d.dictPlatformDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d dictPlatform) As(alias string) *dictPlatform {
	d.dictPlatformDo.DO = *(d.dictPlatformDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *dictPlatform) updateTableName(table string) *dictPlatform {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewInt16(table, "id")
	d.Name = field.NewString(table, "name")
	d.DisplayName = field.NewString(table, "display_name")
	d.CreatedTs = field.NewTime(table, "created_ts")
	d.ModifiedTs = field.NewTime(table, "modified_ts")
	d.DeletedTs = field.NewTime(table, "deleted_ts")

	d.fillFieldMap()

	return d
}

func (d *dictPlatform) WithContext(ctx context.Context) IDictPlatformDo {
	return d.dictPlatformDo.WithContext(ctx)
}

func (d dictPlatform) TableName() string { return d.dictPlatformDo.TableName() }

func (d dictPlatform) Alias() string { return d.dictPlatformDo.Alias() }

func (d *dictPlatform) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *dictPlatform) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 6)
	d.fieldMap["id"] = d.ID
	d.fieldMap["name"] = d.Name
	d.fieldMap["display_name"] = d.DisplayName
	d.fieldMap["created_ts"] = d.CreatedTs
	d.fieldMap["modified_ts"] = d.ModifiedTs
	d.fieldMap["deleted_ts"] = d.DeletedTs
}

func (d dictPlatform) clone(db *gorm.DB) dictPlatform {
	d.dictPlatformDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d dictPlatform) replaceDB(db *gorm.DB) dictPlatform {
	d.dictPlatformDo.ReplaceDB(db)
	return d
}

type dictPlatformDo struct{ gen.DO }

type IDictPlatformDo interface {
	gen.SubQuery
	Debug() IDictPlatformDo
	WithContext(ctx context.Context) IDictPlatformDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDictPlatformDo
	WriteDB() IDictPlatformDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDictPlatformDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDictPlatformDo
	Not(conds ...gen.Condition) IDictPlatformDo
	Or(conds ...gen.Condition) IDictPlatformDo
	Select(conds ...field.Expr) IDictPlatformDo
	Where(conds ...gen.Condition) IDictPlatformDo
	Order(conds ...field.Expr) IDictPlatformDo
	Distinct(cols ...field.Expr) IDictPlatformDo
	Omit(cols ...field.Expr) IDictPlatformDo
	Join(table schema.Tabler, on ...field.Expr) IDictPlatformDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDictPlatformDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDictPlatformDo
	Group(cols ...field.Expr) IDictPlatformDo
	Having(conds ...gen.Condition) IDictPlatformDo
	Limit(limit int) IDictPlatformDo
	Offset(offset int) IDictPlatformDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDictPlatformDo
	Unscoped() IDictPlatformDo
	Create(values ...*model.DictPlatform) error
	CreateInBatches(values []*model.DictPlatform, batchSize int) error
	Save(values ...*model.DictPlatform) error
	First() (*model.DictPlatform, error)
	Take() (*model.DictPlatform, error)
	Last() (*model.DictPlatform, error)
	Find() ([]*model.DictPlatform, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DictPlatform, err error)
	FindInBatches(result *[]*model.DictPlatform, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.DictPlatform) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDictPlatformDo
	Assign(attrs ...field.AssignExpr) IDictPlatformDo
	Joins(fields ...field.RelationField) IDictPlatformDo
	Preload(fields ...field.RelationField) IDictPlatformDo
	FirstOrInit() (*model.DictPlatform, error)
	FirstOrCreate() (*model.DictPlatform, error)
	FindByPage(offset int, limit int) (result []*model.DictPlatform, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDictPlatformDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d dictPlatformDo) Debug() IDictPlatformDo {
	return d.withDO(d.DO.Debug())
}

func (d dictPlatformDo) WithContext(ctx context.Context) IDictPlatformDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d dictPlatformDo) ReadDB() IDictPlatformDo {
	return d.Clauses(dbresolver.Read)
}

func (d dictPlatformDo) WriteDB() IDictPlatformDo {
	return d.Clauses(dbresolver.Write)
}

func (d dictPlatformDo) Session(config *gorm.Session) IDictPlatformDo {
	return d.withDO(d.DO.Session(config))
}

func (d dictPlatformDo) Clauses(conds ...clause.Expression) IDictPlatformDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d dictPlatformDo) Returning(value interface{}, columns ...string) IDictPlatformDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d dictPlatformDo) Not(conds ...gen.Condition) IDictPlatformDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d dictPlatformDo) Or(conds ...gen.Condition) IDictPlatformDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d dictPlatformDo) Select(conds ...field.Expr) IDictPlatformDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d dictPlatformDo) Where(conds ...gen.Condition) IDictPlatformDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d dictPlatformDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IDictPlatformDo {
	return d.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (d dictPlatformDo) Order(conds ...field.Expr) IDictPlatformDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d dictPlatformDo) Distinct(cols ...field.Expr) IDictPlatformDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d dictPlatformDo) Omit(cols ...field.Expr) IDictPlatformDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d dictPlatformDo) Join(table schema.Tabler, on ...field.Expr) IDictPlatformDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d dictPlatformDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDictPlatformDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d dictPlatformDo) RightJoin(table schema.Tabler, on ...field.Expr) IDictPlatformDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d dictPlatformDo) Group(cols ...field.Expr) IDictPlatformDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d dictPlatformDo) Having(conds ...gen.Condition) IDictPlatformDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d dictPlatformDo) Limit(limit int) IDictPlatformDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d dictPlatformDo) Offset(offset int) IDictPlatformDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d dictPlatformDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDictPlatformDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d dictPlatformDo) Unscoped() IDictPlatformDo {
	return d.withDO(d.DO.Unscoped())
}

func (d dictPlatformDo) Create(values ...*model.DictPlatform) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d dictPlatformDo) CreateInBatches(values []*model.DictPlatform, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d dictPlatformDo) Save(values ...*model.DictPlatform) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d dictPlatformDo) First() (*model.DictPlatform, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DictPlatform), nil
	}
}

func (d dictPlatformDo) Take() (*model.DictPlatform, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DictPlatform), nil
	}
}

func (d dictPlatformDo) Last() (*model.DictPlatform, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DictPlatform), nil
	}
}

func (d dictPlatformDo) Find() ([]*model.DictPlatform, error) {
	result, err := d.DO.Find()
	return result.([]*model.DictPlatform), err
}

func (d dictPlatformDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DictPlatform, err error) {
	buf := make([]*model.DictPlatform, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d dictPlatformDo) FindInBatches(result *[]*model.DictPlatform, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d dictPlatformDo) Attrs(attrs ...field.AssignExpr) IDictPlatformDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d dictPlatformDo) Assign(attrs ...field.AssignExpr) IDictPlatformDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d dictPlatformDo) Joins(fields ...field.RelationField) IDictPlatformDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d dictPlatformDo) Preload(fields ...field.RelationField) IDictPlatformDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d dictPlatformDo) FirstOrInit() (*model.DictPlatform, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DictPlatform), nil
	}
}

func (d dictPlatformDo) FirstOrCreate() (*model.DictPlatform, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DictPlatform), nil
	}
}

func (d dictPlatformDo) FindByPage(offset int, limit int) (result []*model.DictPlatform, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d dictPlatformDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d dictPlatformDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d dictPlatformDo) Delete(models ...*model.DictPlatform) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *dictPlatformDo) withDO(do gen.Dao) *dictPlatformDo {
	d.DO = *do.(*gen.DO)
	return d
}
