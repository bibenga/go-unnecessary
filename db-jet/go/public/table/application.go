//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Application = newApplicationTable("public", "application", "")

type applicationTable struct {
	postgres.Table

	// Columns
	ID             postgres.ColumnInteger
	DictPlatformID postgres.ColumnInteger
	Name           postgres.ColumnString
	DisplayName    postgres.ColumnString
	CreatedTs      postgres.ColumnTimestampz
	ModifiedTs     postgres.ColumnTimestampz
	DeletedTs      postgres.ColumnTimestampz
	SomeFlg        postgres.ColumnBool
	SomeDouble1    postgres.ColumnFloat
	SomeDouble2    postgres.ColumnFloat
	SomeJSON       postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ApplicationTable struct {
	applicationTable

	EXCLUDED applicationTable
}

// AS creates new ApplicationTable with assigned alias
func (a ApplicationTable) AS(alias string) *ApplicationTable {
	return newApplicationTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ApplicationTable with assigned schema name
func (a ApplicationTable) FromSchema(schemaName string) *ApplicationTable {
	return newApplicationTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ApplicationTable with assigned table prefix
func (a ApplicationTable) WithPrefix(prefix string) *ApplicationTable {
	return newApplicationTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ApplicationTable with assigned table suffix
func (a ApplicationTable) WithSuffix(suffix string) *ApplicationTable {
	return newApplicationTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newApplicationTable(schemaName, tableName, alias string) *ApplicationTable {
	return &ApplicationTable{
		applicationTable: newApplicationTableImpl(schemaName, tableName, alias),
		EXCLUDED:         newApplicationTableImpl("", "excluded", ""),
	}
}

func newApplicationTableImpl(schemaName, tableName, alias string) applicationTable {
	var (
		IDColumn             = postgres.IntegerColumn("id")
		DictPlatformIDColumn = postgres.IntegerColumn("dict_platform_id")
		NameColumn           = postgres.StringColumn("name")
		DisplayNameColumn    = postgres.StringColumn("display_name")
		CreatedTsColumn      = postgres.TimestampzColumn("created_ts")
		ModifiedTsColumn     = postgres.TimestampzColumn("modified_ts")
		DeletedTsColumn      = postgres.TimestampzColumn("deleted_ts")
		SomeFlgColumn        = postgres.BoolColumn("some_flg")
		SomeDouble1Column    = postgres.FloatColumn("some_double1")
		SomeDouble2Column    = postgres.FloatColumn("some_double2")
		SomeJSONColumn       = postgres.StringColumn("some_json")
		allColumns           = postgres.ColumnList{IDColumn, DictPlatformIDColumn, NameColumn, DisplayNameColumn, CreatedTsColumn, ModifiedTsColumn, DeletedTsColumn, SomeFlgColumn, SomeDouble1Column, SomeDouble2Column, SomeJSONColumn}
		mutableColumns       = postgres.ColumnList{DictPlatformIDColumn, NameColumn, DisplayNameColumn, CreatedTsColumn, ModifiedTsColumn, DeletedTsColumn, SomeFlgColumn, SomeDouble1Column, SomeDouble2Column, SomeJSONColumn}
	)

	return applicationTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:             IDColumn,
		DictPlatformID: DictPlatformIDColumn,
		Name:           NameColumn,
		DisplayName:    DisplayNameColumn,
		CreatedTs:      CreatedTsColumn,
		ModifiedTs:     ModifiedTsColumn,
		DeletedTs:      DeletedTsColumn,
		SomeFlg:        SomeFlgColumn,
		SomeDouble1:    SomeDouble1Column,
		SomeDouble2:    SomeDouble2Column,
		SomeJSON:       SomeJSONColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
