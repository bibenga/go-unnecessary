//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var StudyState = newStudyStateTable("", "study_state", "")

type studyStateTable struct {
	sqlite.Table

	// Columns
	ID         sqlite.ColumnInteger
	Question   sqlite.ColumnString
	Answer     sqlite.ColumnString
	TextPairID sqlite.ColumnInteger
	IsDone     sqlite.ColumnFloat
	IsSkiped   sqlite.ColumnFloat
	CreatedAt  sqlite.ColumnTimestamp
	UpdatedAt  sqlite.ColumnTimestamp
	DeletedAt  sqlite.ColumnTimestamp

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type StudyStateTable struct {
	studyStateTable

	EXCLUDED studyStateTable
}

// AS creates new StudyStateTable with assigned alias
func (a StudyStateTable) AS(alias string) *StudyStateTable {
	return newStudyStateTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new StudyStateTable with assigned schema name
func (a StudyStateTable) FromSchema(schemaName string) *StudyStateTable {
	return newStudyStateTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new StudyStateTable with assigned table prefix
func (a StudyStateTable) WithPrefix(prefix string) *StudyStateTable {
	return newStudyStateTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new StudyStateTable with assigned table suffix
func (a StudyStateTable) WithSuffix(suffix string) *StudyStateTable {
	return newStudyStateTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newStudyStateTable(schemaName, tableName, alias string) *StudyStateTable {
	return &StudyStateTable{
		studyStateTable: newStudyStateTableImpl(schemaName, tableName, alias),
		EXCLUDED:        newStudyStateTableImpl("", "excluded", ""),
	}
}

func newStudyStateTableImpl(schemaName, tableName, alias string) studyStateTable {
	var (
		IDColumn         = sqlite.IntegerColumn("id")
		QuestionColumn   = sqlite.StringColumn("question")
		AnswerColumn     = sqlite.StringColumn("answer")
		TextPairIDColumn = sqlite.IntegerColumn("text_pair_id")
		IsDoneColumn     = sqlite.FloatColumn("is_done")
		IsSkipedColumn   = sqlite.FloatColumn("is_skiped")
		CreatedAtColumn  = sqlite.TimestampColumn("created_at")
		UpdatedAtColumn  = sqlite.TimestampColumn("updated_at")
		DeletedAtColumn  = sqlite.TimestampColumn("deleted_at")
		allColumns       = sqlite.ColumnList{IDColumn, QuestionColumn, AnswerColumn, TextPairIDColumn, IsDoneColumn, IsSkipedColumn, CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn}
		mutableColumns   = sqlite.ColumnList{QuestionColumn, AnswerColumn, TextPairIDColumn, IsDoneColumn, IsSkipedColumn, CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn}
	)

	return studyStateTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:         IDColumn,
		Question:   QuestionColumn,
		Answer:     AnswerColumn,
		TextPairID: TextPairIDColumn,
		IsDone:     IsDoneColumn,
		IsSkiped:   IsSkipedColumn,
		CreatedAt:  CreatedAtColumn,
		UpdatedAt:  UpdatedAtColumn,
		DeletedAt:  DeletedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
